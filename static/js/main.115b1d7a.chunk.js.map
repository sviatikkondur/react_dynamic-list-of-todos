{"version":3,"sources":["types/FilterType.ts","components/TodoList/TodoList.tsx","utils/catitalize.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","utils/prepareTodos.ts","index.tsx"],"names":["FilterType","TodoList","todos","selectedTodo","setSelectedTodo","setSelectedUserId","className","map","todo","id","title","completed","userId","cn","type","onClick","TodoFilter","query","onTypeChange","onQueryChange","value","onChange","e","target","Object","values","filter","string","charAt","toUpperCase","slice","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","selectedUserId","useState","user","setUser","useEffect","href","email","name","App","loading","setTodos","All","setFilter","preparedTodos","filteredTodos","normaliedQuery","toLowerCase","trim","includes","prepareTodos","prevTodos","data","finally","newType","prevFilter","newQuery","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.115b1d7a.chunk.js","sourcesContent":["export enum FilterType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodo: Todo | null,\n  setSelectedTodo: (todo: Todo) => void,\n  setSelectedUserId: (id: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  setSelectedTodo,\n  setSelectedUserId,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const {\n          id, title, completed, userId,\n        } = todo;\n\n        return (\n          <tr\n            data-cy=\"todo\"\n            className={cn({\n              'has-background-info-light': (\n                selectedTodo?.id === id\n              ),\n            })}\n            key={id}\n          >\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn(\n                  {\n                    'has-text-danger': !completed,\n                    'has-text-success': completed,\n                  },\n                )}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  setSelectedTodo(todo);\n                  setSelectedUserId(userId);\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={selectedTodo?.id === id\n                    ? 'far fa-eye-slash'\n                    : 'far fa-eye'}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","export const capitalize = (string: string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n","import { FilterType } from '../../types/FilterType';\nimport { capitalize } from '../../utils/catitalize';\n\ntype Props = {\n  query: string,\n  type: FilterType,\n  onTypeChange: (filterType: FilterType) => void,\n  onQueryChange: (query: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  type,\n  onTypeChange,\n  onQueryChange,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={type}\n          onChange={e => onTypeChange(e.target.value as FilterType)}\n        >\n          {Object.values(FilterType).map(filter => (\n            <option value={filter} key={filter}>\n              {capitalize(filter)}\n            </option>\n          ))}\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={e => onQueryChange(e.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => onQueryChange('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  selectedTodo: Todo | null,\n  selectedUserId: number,\n  setSelectedTodo: (todo: Todo | null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  selectedUserId,\n  setSelectedTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(selectedUserId).then(setUser);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {selectedTodo?.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { getTodos } from './api';\nimport { Todos } from './types/Todos';\nimport { Todo } from './types/Todo';\nimport { prepareTodos } from './utils/prepareTodos';\nimport { FilterType } from './types/FilterType';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todos>({\n    todos: [],\n    loading: false,\n  });\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [selectedUserId, setSelectedUserId] = useState<number>(0);\n  const [filter, setFilter] = useState({\n    type: FilterType.All,\n    query: '',\n  });\n\n  const preparedTodos = prepareTodos(filter, todos);\n\n  useEffect(() => {\n    setTodos((prevTodos) => ({\n      ...prevTodos,\n      loading: true,\n    }));\n\n    getTodos()\n      .then((data) => setTodos((prevTodos) => ({\n        ...prevTodos,\n        todos: data,\n      })))\n      .finally(() => setTodos((prevTodos) => ({\n        ...prevTodos,\n        loading: false,\n      })));\n  }, []);\n\n  const handleFilterTypeChange = (newType: FilterType) => {\n    setFilter(prevFilter => ({\n      ...prevFilter,\n      type: newType,\n    }));\n  };\n\n  const handleFilterQueryChange = (newQuery: string) => {\n    setFilter(prevFilter => ({\n      ...prevFilter,\n      query: newQuery,\n    }));\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={filter.query}\n                type={filter.type}\n                onTypeChange={handleFilterTypeChange}\n                onQueryChange={handleFilterQueryChange}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.loading && <Loader />}\n              {!todos.loading && (\n                <TodoList\n                  todos={preparedTodos}\n                  selectedTodo={selectedTodo}\n                  setSelectedTodo={setSelectedTodo}\n                  setSelectedUserId={setSelectedUserId}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          selectedUserId={selectedUserId}\n          setSelectedTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { Filter } from '../types/Filter';\nimport { Todos } from '../types/Todos';\n\nexport const prepareTodos = (filter: Filter, todos: Todos) => {\n  const { type, query } = filter;\n  let filteredTodos = [...todos.todos];\n\n  if (type) {\n    switch (type) {\n      case 'active':\n        filteredTodos = filteredTodos.filter(todo => !todo.completed);\n        break;\n      case 'completed':\n        filteredTodos = filteredTodos.filter(todo => todo.completed);\n        break;\n      default:\n        break;\n    }\n  }\n\n  if (query) {\n    filteredTodos = filteredTodos.filter(todo => {\n      const normaliedQuery = query.toLowerCase().trim();\n\n      return todo.title.toLowerCase().includes(normaliedQuery);\n    });\n  }\n\n  return filteredTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}